{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/articles": {
    "description": "serves an array of all articles. Default ordering desc on created_at column. Includes a comment count. Use sort_by and order queries. Results are limited by default to 10. Use p=:INT to handle pagination",
    "queries": ["author", "topic", "sort_by", ["title", "author", "topic", "created_at"], "order", ["ASC", "DESC"], "limit = 10", "p"],
    "exampleResponse": {
      "articles": [
        {
          "article_id": 2,
          "title": "Seafood substitutions are increasing",
          "topic": "cooking",
          "author": "weegembump",
          "created_at": "2018-05-30T15:59:13.341Z",
          "votes": 0,
          "comment_count": 6,
          "total_count": 37
        }
      ]
    }
  },
  "POST /api/articles": {
    "description": "post a new article with author, title, body, topic, and avatar_img_url. Rejects unregistered users and topics that do not exist.",
    "queries": [],
    "exampleResponse": {
      "article": [
        {
          "article_id": 14,
          "title": "Seafood substitutions are increasing",
          "topic": "cooking",
          "author": "weegembump",
          "body": "A string body",
          "created_at": "2018-05-30T15:59:13.341Z",
          "votes": 0,
          "comment_count": 6,
          "total_count": 37
        }
      ]
    }
  },
  "GET /api/articles/:article_id/comments": {
    "description": "serves all comments associated to an article id ordered by data, newest first. Comments are limited 10 by default. Pagination can be handled with p query.",
    "queries": ["limit = 10", "p"],
    "exampleResponse": {
      "comments": [
        {
          "comment_id": 5,
          "body": "A string",
          "article_id": 1,
          "author": "A string",
          "votes": 0,
          "created_at": "2020-11-03T21:00:00.000Z"
        }
      ]
    }
  },
  "POST /api/articles/:article_id/comments": {
    "description": "allows existing user to post a new comment to an article based on the article_id.",
    "queries": [],
    "exampleResponse": {
      "comments": [
        {
          "username": "A string",
          "body": "A string"
        }
      ]
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "Add or subtract votes to the vote property of an article based on its ID.",
    "inputBodyExample": {"inc_votes": 10},
    "queries": [],
    "exampleResponse": {
      "article": [
        {
          "title": "Seafood substitutions are increasing",
          "topic": "cooking",
          "author": "weegembump",
          "created_at": "2018-05-30T15:59:13.341Z",
          "votes": 10,
          "comment_count": 6
        }
      ]
    }
  },
  "DELETE /api/articles/:article_id": {
    "description": "Delete an article based on its ID.",
    "queries": [],
    "exampleResponse": {}
  },
  "DELETE /api/comments/:comment_id": {
    "description": "Delete comment by comment_id.",
    "queries": [],
    "exampleResponse": {}
  },
  "PATCH /api/comments/:comment_id": {
    "description": "Increase or decrease comment vote by an integer",
    "inputBodyExample": {"inc_votes": 10},
    "queries": [],
    "exampleResponse": {
      "comments": [
        {
          "comment_id": 5,
          "body": "A string",
          "article_id": 1,
          "author": "A string",
          "votes": 10,
          "created_at": "2020-11-03T21:00:00.000Z"
        }
      ]
    }
  },
  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [{ "slug": "football", "description": "Footie!" }]
    }
  },
  "POST /api/topics": {
    "description": "add a new topic to the database",
    "inputBodyExample": {"slug": "new topic slug", "description": "topic description"},
    "queries": [],
    "exampleResponse": {
      "topics": [{ "slug": "football", "description": "The beautiful game" }]
    }
  },
  "GET /api/users": {
    "description": "Retrieves all users from the database.",
    "queries": [],
    "exampleResponse": {
      "article": [
        {
          "username": "MalcolmMethane",
          "name": "Malcolm Murphy",
          "avatar_url": "https://avatars2.githubusercontent.com/u/24604688?s=460&v=4"
        }
      ]
    }
  }
}
